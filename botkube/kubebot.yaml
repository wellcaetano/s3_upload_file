---
#create service account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubebot-user
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubebot-user
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
#  Create ClusterRole with Ref NOTE : clsuter-admin is more powerful
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: kubebot-user
  namespace: default
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubebot
  labels:

    component: kubebot
spec:
  replicas: 1
  selector:
     matchLabels:
         component: kubebot
  template:
    metadata:
      labels:
        component: kubebot
    spec:
      containers:
        - name: kubebot
          image: harbur/kubebot:latest
          imagePullPolicy: Always
          env:
            # Create a secret with your slack bot token and reference it here
            - name: KUBEBOT_SLACK_TOKEN
              valueFrom:
                secretKeyRef:
                  name: kubebot
                  key: token
            # Create a secret with your slack bot channel id and reference it here
            - name: KUBEBOT_SLACK_CHANNELS_IDS
              valueFrom:
                secretKeyRef:
                  name: kubebot
                  key: channel
            # Alternatively, use this instead if you don't need to put channel ids in a secret; use a space as a separator
            # - name: KUBEBOT_SLACK_CHANNELS_IDS
            #   value: "1234 4321"
            # Specify slack admins that kubebot should listen to; use a space as a separator
            - name: KUBEBOT_SLACK_ADMINS_NICKNAMES
              value: "*"
            # Specify valid kubectl commands that kubebot should support; use a space as a separator
            - name: KUBEBOT_SLACK_VALID_COMMANDS
              value: "*"